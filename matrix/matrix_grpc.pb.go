// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: matrix/matrix.proto

package matrix

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ByteTransferService_SendBytes_FullMethodName = "/main.ByteTransferService/SendBytes"
)

// ByteTransferServiceClient is the client API for ByteTransferService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ByteTransferServiceClient interface {
	SendBytes(ctx context.Context, in *ByteArrayRequest, opts ...grpc.CallOption) (*ByteArrayResponse, error)
}

type byteTransferServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewByteTransferServiceClient(cc grpc.ClientConnInterface) ByteTransferServiceClient {
	return &byteTransferServiceClient{cc}
}

func (c *byteTransferServiceClient) SendBytes(ctx context.Context, in *ByteArrayRequest, opts ...grpc.CallOption) (*ByteArrayResponse, error) {
	out := new(ByteArrayResponse)
	err := c.cc.Invoke(ctx, ByteTransferService_SendBytes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ByteTransferServiceServer is the server API for ByteTransferService service.
// All implementations must embed UnimplementedByteTransferServiceServer
// for forward compatibility
type ByteTransferServiceServer interface {
	SendBytes(context.Context, *ByteArrayRequest) (*ByteArrayResponse, error)
	mustEmbedUnimplementedByteTransferServiceServer()
}

// UnimplementedByteTransferServiceServer must be embedded to have forward compatible implementations.
type UnimplementedByteTransferServiceServer struct {
}

func (UnimplementedByteTransferServiceServer) SendBytes(context.Context, *ByteArrayRequest) (*ByteArrayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendBytes not implemented")
}
func (UnimplementedByteTransferServiceServer) mustEmbedUnimplementedByteTransferServiceServer() {}

// UnsafeByteTransferServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ByteTransferServiceServer will
// result in compilation errors.
type UnsafeByteTransferServiceServer interface {
	mustEmbedUnimplementedByteTransferServiceServer()
}

func RegisterByteTransferServiceServer(s grpc.ServiceRegistrar, srv ByteTransferServiceServer) {
	s.RegisterService(&ByteTransferService_ServiceDesc, srv)
}

func _ByteTransferService_SendBytes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByteArrayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ByteTransferServiceServer).SendBytes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ByteTransferService_SendBytes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ByteTransferServiceServer).SendBytes(ctx, req.(*ByteArrayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ByteTransferService_ServiceDesc is the grpc.ServiceDesc for ByteTransferService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ByteTransferService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "main.ByteTransferService",
	HandlerType: (*ByteTransferServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendBytes",
			Handler:    _ByteTransferService_SendBytes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "matrix/matrix.proto",
}
